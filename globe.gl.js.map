{"version":3,"file":"globe.gl.js","sources":["../src/scripts.js"],"sourcesContent":["const firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\n  measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID\n};\n\n// Initialize Firebase app\nfirebase.initializeApp(firebaseConfig);\n\nconst db = firebase.firestore();\nconst storage = firebase.storage();\n\n// Popup card logic\nconst joinPopup = document.getElementById('join-popup');\nconst removePopup = document.getElementById('remove-popup');\n\n// Show popup when \"Join\" button is clicked\ndocument.getElementById('join-btn').addEventListener('click', () => {\n  joinPopup.style.display = 'block';\n});\n\n// Show popup when \"Remove\" button is clicked\ndocument.getElementById('remove-btn').addEventListener('click', () => {\n  removePopup.style.display = 'block';\n});\n\n// Close the popups\nfunction closePopup() {\n  joinPopup.style.display = 'none';\n  removePopup.style.display = 'none';\n}\n\ndocument.getElementById('close-join-form').addEventListener('click', closePopup);\ndocument.getElementById('close-remove-form').addEventListener('click', closePopup);\n\n// Function to check if a user exists in the participants list\nasync function isUserInParticipants(firstName, secondName) {\n  // Normalize inputs to \"FirstName LastName\" format\n  const formattedFirstName = toTitleCase(firstName);\n  const formattedSecondName = toTitleCase(secondName);\n\n  // Query Firestore for the formatted names\n  const participantsRef = collection(db, 'participants');\n  \n  const q = query(\n    participantsRef, \n    where('firstName', '==', formattedFirstName),\n    where('secondName', '==', formattedSecondName)\n  );\n\n  try {\n    const querySnapshot = await getDocs(q);\n    \n    if (!querySnapshot.empty) {\n      console.log('User found in participants.');\n      return true;\n    } else {\n      console.log('User not found in participants.');\n      return false;\n    }\n  } catch (error) {\n    console.error('Error checking Firestore:', error);\n    return false;\n  }\n}\n\nfunction toTitleCase(name) {\n  return name\n    .toLowerCase() // First convert everything to lowercase\n    .split(' ') // Split by space to handle names with multiple parts\n    .map(word => word.charAt(0).toUpperCase() + word.slice(1)) // Capitalize first letter of each word\n    .join(' '); // Join them back together with spaces\n}\n\n// Function to check if a user with the same first name, second name, and city already exists\nasync function checkIfUserExists(firstName, secondName, cityId) {\n  console.log('Checking if user in same city with same name already exists');\n  try {\n    // Query the Firestore 'users' collection for the given firstName, secondName, and cityId\n    const usersSnapshot = await db.collection('users')\n      .where('firstName', '==', firstName)\n      .where('secondName', '==', secondName)\n      .where('cityId', '==', cityId)\n      .get();\n\n    // If the query returns any documents, a user already exists\n    if (!usersSnapshot.empty) {\n      return true;  // User exists\n    } else {\n      return false; // No user found\n    }\n  } catch (error) {\n    console.error('Error checking for existing user: ', error);\n    return false;  // Return false in case of error\n  }\n}\n\n// Function to check if a user with the same Instagram handle already exists\nasync function checkIfInstagramExists(instagram) {\n  console.log('Checking if instagram handle already exists');\n  try {\n    // Query the Firestore 'users' collection for the given Instagram handle\n    const usersSnapshot = await db.collection('users')\n      .where('instagram', '==', instagram.toLowerCase())\n      .get();\n\n    // If the query returns any documents, a user already exists with this Instagram\n    if (!usersSnapshot.empty) {\n      return true;  // Instagram exists\n    } else {\n      return false; // No user found with this Instagram\n    }\n  } catch (error) {\n    console.error('Error checking for existing Instagram: ', error);\n    return false;  // Return false in case of error\n  }\n}\n\nlet joinFormSubmitting = false;\n\ndocument.getElementById('join-form').addEventListener('submit', async (event) => {\n    event.preventDefault(); // Prevent the default form submission\n\n    if (joinFormSubmitting) {\n        return; // If already submitting, prevent duplicate submissions\n    }\n\n    joinFormSubmitting = true; // Set the flag to true, to indicate the form is being submitted\n\n    console.log('Inside the join form.');\n\n    // City validation logic\n    const cityInput = document.getElementById('city');\n    const cityList = document.getElementById('city-list').options;\n    const selectedCity = cityInput.value.trim();\n    const cityError = document.getElementById('city-error');\n    \n    let isValidCity = false;\n\n    // Loop through the options in the datalist to check for a match\n    for (let i = 0; i < cityList.length; i++) {\n      if (selectedCity === cityList[i].value) {\n        isValidCity = true;\n        break;\n      }\n    }\n\n    if (!isValidCity) {\n      cityError.style.display = 'block'; // Show the error message\n      cityInput.value = ''; // Optionally clear the input\n      joinFormSubmitting = false; // Reset the flag\n      return; // Stop form submission if city is invalid\n    } else {\n      cityError.style.display = 'none'; // Hide the error message if valid\n    }\n\n    // Continue with the rest of the form submission logic if the city is valid\n    const joinButton = document.getElementById('join-btn');\n    joinButton.disabled = true; // Disable the button\n    document.getElementById('loading-indicator').style.display = 'block'; // Show loading indicator\n\n    const firstName = document.getElementById('first-name').value.trim();\n    const secondName = document.getElementById('second-name').value.trim();\n    const cityId = document.getElementById('city-id').value;\n    const instagram = document.getElementById('instagram').value.trim();\n    const pictureInput = document.getElementById('picture');\n\n    // Check if the user exists in participants\n    if (!isUserInParticipants(firstName, secondName)) {\n      alert('User not found in marathon participants. Please check your name and try again.');\n      joinButton.disabled = false; // Re-enable the button\n      joinFormSubmitting = false; // Reset the flag\n      document.getElementById('loading-indicator').style.display = 'none'; // Hide loading\n      return; // Stop form submission\n    }\n\n    const userExists = await checkIfUserExists(firstName, secondName, cityId);\n    if (userExists) {\n      alert('A user with the same name in the selected city already exists. Please try again.');\n      joinButton.disabled = false; // Re-enable the button\n      joinFormSubmitting = false; // Reset the flag\n      document.getElementById('loading-indicator').style.display = 'none'; // Hide loading\n      return; // Stop form submission\n    }\n\n    const instagramExists = await checkIfInstagramExists(instagram);\n    if (instagramExists) {\n      alert('This Instagram handle is already associated with another user. Please use a different one.');\n      joinButton.disabled = false; // Re-enable the button\n      joinFormSubmitting = false; // Reset the flag\n      document.getElementById('loading-indicator').style.display = 'none'; // Hide loading\n      return; // Stop form submission\n    }\n\n    try {\n      let pictureURL = null;\n\n      // Check if a picture file was selected\n      if (pictureInput.files && pictureInput.files[0]) {\n        const pictureFile = pictureInput.files[0];\n        const storageRef = firebase.storage().ref();\n        const pictureRef = storageRef.child(`profile_pictures/${firstName}_${secondName}_${Date.now()}`);\n\n        // Upload the selected picture file\n        const uploadSnapshot = await pictureRef.put(pictureFile);\n        pictureURL = await uploadSnapshot.ref.getDownloadURL();\n      }\n\n      // Continue with adding user to Firestore as before\n      const newUserRef = await db.collection('users').add({\n        firstName,\n        secondName,\n        cityId,\n        instagram: instagram.toLowerCase(),\n        pictureURL: pictureURL || null\n      });\n\n      console.log('Calling incrementCityUsers for cityId:', cityId);\n      await incrementCityUsers(cityId);\n\n      alert('Thank you for joining!');\n      loadCityData();\n      closePopup();\n    } catch (error) {\n      console.error('Error adding user or uploading image:', error);\n      alert('Failed to join. Please try again.');\n    } finally {\n      // Re-enable the button and hide loading in all scenarios\n      joinButton.disabled = false;\n      joinFormSubmitting = false; // Reset the flag\n      document.getElementById('loading-indicator').style.display = 'none'; // Hide loading\n    }\n});\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const cityInput = document.getElementById('city');\n  const cityError = document.getElementById('city-error');\n  const cityList = document.getElementById('city-list');\n\n  // 1. Show the dropdown immediately when the user clicks into the city input (on focus)\n  cityInput.addEventListener('focus', () => {\n    cityError.style.display = 'none'; // Hide any previous error message\n    // Trigger an input event to open the dropdown list immediately\n    const event = new Event('input', { bubbles: true });\n    cityInput.dispatchEvent(event);\n  });\n\n  // Validation logic to check if the input matches a city from the datalist\n  cityInput.addEventListener('blur', () => {\n    validateCity(); // Call validation when the user clicks out\n  });\n\n  function validateCity() {\n    const selectedCity = cityInput.value.trim();\n    let isValidCity = false;\n\n    // Check if the entered city matches one of the datalist options\n    for (let i = 0; i < cityList.options.length; i++) {\n      if (selectedCity === cityList.options[i].value) {\n        isValidCity = true;\n        break;\n      }\n    }\n\n    if (!isValidCity) {\n      cityError.style.display = 'block'; // Show the error message if invalid\n      cityInput.value = ''; // Optionally clear the input\n    } else {\n      cityError.style.display = 'none'; // Hide the error message if valid\n    }\n  }\n});\n\nasync function incrementCityUsers(cityId) {\n  console.log('In increment city users');\n  try {\n    const cityRef = db.collection('cities').doc(cityId);\n\n    await db.runTransaction(async (transaction) => {\n      const cityDoc = await transaction.get(cityRef);\n\n      if (!cityDoc.exists) {\n        console.error(`City document with ID ${cityId} does not exist!`);\n        return;\n      } else {\n        console.log(`City document with ID ${cityId} exists. Proceeding to update.`);\n      }\n\n      const currentNumberOfUsers = cityDoc.data().numberOfUsers || 0;\n\n      transaction.update(cityRef, {\n        numberOfUsers: currentNumberOfUsers + 1\n      });\n    });\n    console.log('City user count incremented successfully.');\n  } catch (error) {\n    console.error('Error incrementing city users:', error);\n  }\n}\n\n// Handle \"Remove\" form submission (communicate with Firebase)\ndocument.getElementById('remove-form').addEventListener('submit', async (event) => {\n  event.preventDefault();\n\n  const firstName = document.getElementById('first-name-remove').value;\n  const secondName = document.getElementById('second-name-remove').value;\n\n  try {\n    // Step 1: Check if user exists with the provided first name and second name\n    const usersSnapshot = await db.collection('users')\n      .where('firstName', '==', firstName)\n      .where('secondName', '==', secondName)\n      .get();\n\n    // Step 2: Handle if no user is found\n    if (usersSnapshot.empty) {\n      alert('No user found with the given name. Please check the details.');\n      return; // Stop submission\n    }\n\n    // Step 3: Collect all matching user IDs (handle multiple matches)\n    const userIds = [];\n    usersSnapshot.forEach(doc => {\n      userIds.push(doc.id); // Collect the user ID\n    });\n\n    // Step 4: Submit the removal request to the 'removal_requests' collection with the matched user IDs\n    await db.collection('removal_requests').add({\n      firstName: firstName,\n      secondName: secondName,\n      userIds: userIds,  // Store the matching user IDs\n      timestamp: new Date() // Save the timestamp of the request\n    });\n\n    alert(\"Your removal request has been submitted. Removal will occur within 24hrs.\");\n  } catch (error) {\n    console.error(\"Error submitting removal request: \", error);\n    alert(\"Failed to submit removal request. Please try again.\");\n  }\n\n  closePopup(); // Close the form popup after successful submission\n});\n\n// Fetch city data from Firestore\nasync function fetchCities() {\n  const citiesCollection = db.collection(\"cities\")\n      .where('numberOfUsers', '>', 0)  // Filter for cities where numberOfUsers is greater than 0\n      .orderBy('numberOfUsers', 'desc') // Order by numberOfUsers in descending order\n      .limit(100); \n  const citiesSnapshot = await citiesCollection.get();\n  const cities = [];\n\n  citiesSnapshot.forEach((cityDoc) => {\n    const cityData = cityDoc.data();\n    cities.push({\n      id: cityDoc.id,\n      name: cityData.name,\n      latitude: cityData.latitude,\n      longitude: cityData.longitude,\n      population: cityData.population,\n      numberOfUsers: cityData.numberOfUsers,\n      country: cityData.country\n    });\n  });\n\n  console.log(\"CITIES: \", cities);  // Check that city data is being fetched correctly\n  return cities;\n}\n\n// Fetch user data for a specific city from Firestore\nasync function fetchUsersForCity(cityId) {\n  const usersSnapshot = await db.collection(\"users\").where('cityId', '==', cityId).get();\n  const users = [];\n\n  usersSnapshot.forEach((userDoc) => {\n    const userData = userDoc.data();\n    users.push({\n      firstName: userData.firstName,\n      secondName: userData.secondName,\n      instagram: userData.instagram,\n      pictureURL: userData.pictureURL\n    });\n  });\n\n  console.log(`USERS FOR CITY (${cityId}): `, users);  // Log the users for debugging\n  return users;\n}\n\nfunction fetchCitiesAndCreateGlobe() {\n  // Globe.js initialization with Firebase data\n  fetchCities().then(cities => {\n    console.log(cities); // Log the cities to check if data is being pulled correctly\n    \n    const globe = Globe()\n    .globeImageUrl('//unpkg.com/three-globe/example/img/earth-blue-marble.jpg')\n    .labelsData(cities)\n    .labelLat(d => d.latitude)\n    .labelLng(d => d.longitude)\n    .labelText(d => d.name)\n    .labelSize(d => {\n        const minSize = 0.6; // Minimum label size\n        const maxSize = 1.6; // Maximum label size\n        const minUsers = 1;   // Minimum number of users\n        const maxUsers = 30;  // Maximum number of users\n\n        // Calculate the size based on the number of users\n        return ((d.numberOfUsers - minUsers) / (maxUsers - minUsers)) * (maxSize - minSize) + minSize;\n    })\n    .labelDotRadius(d => {\n        const minRadius = 0.6; // Minimum label size\n        const maxRadius = 1.2;\n\n        // Calculate the radius based on the number of users\n        return ((d.numberOfUsers - 1) / (30 - 1)) * (maxRadius - minRadius) + minRadius; \n    })\n    .labelColor(() => '#ffffff')\n    .labelResolution(2)\n    .backgroundColor('#FDF5E8')\n    (document.getElementById('globeViz'));\n\n  // Set initial view to the USA\n  globe.pointOfView({ lat: 37.0902, lng: -95.7129, altitude: 2.5 }, 1000);\n\n  // Handle label clicks to show city info and associated users\n  globe.onLabelClick(async city => {\n    const selectedCity = cities.find(c => c.name === city.name);\n    if (selectedCity) {\n      const cityInfo = selectedCity.name + \", \" + selectedCity.country;\n      \n      // Fetch users for the selected city\n      const users = await fetchUsersForCity(selectedCity.id);\n\n      // Map users data to display\n      const usersInfo = users.map(user => `\n        <a href=\"https://instagram.com/${user.instagram}\" target=\"_blank\" class=\"user-card-link\">\n          <div class=\"user-card\">\n            <img src=\"${user.pictureURL}\" alt=\"${user.firstName}'s picture\" class=\"user-picture\">\n            <div class=\"user-info\">\n              <p class=\"user-name\">${user.firstName} ${user.secondName}</p>\n              <p class=\"user-instagram\">@${user.instagram}</p>\n            </div>\n          </div>\n        </a>\n      `).join(\"\");  // Join without extra spaces to avoid layout issues\n        // Join without extra spaces to avoid layout issues\n\n      console.log(\"usersInfo: \", usersInfo);\n\n      // Update the popup with city and user info\n      document.getElementById('city-name').textContent = cityInfo;\n      document.getElementById('city-info').innerHTML = usersInfo; // Use innerHTML to render HTML content\n\n      // Show the city info popup\n      document.getElementById('city-popup').style.display = 'block';\n    }\n});\n});\n};\n\n// Close city info popup\ndocument.getElementById('city-close-btn').addEventListener('click', function() {\n  document.getElementById('city-popup').style.display = 'none';\n});\n\n// Function to populate the city options in the datalist\nfunction populateCityOptions(cityMapping) {\n  const datalist = document.getElementById('city-list');\n  \n  // Clear existing options\n  datalist.innerHTML = '';\n\n  // Add options to the datalist\n  for (const [cityName, cityId] of Object.entries(cityMapping)) {\n    const option = document.createElement('option');\n    option.value = cityName;  // Display the city name to the user\n    option.dataset.cityId = cityId;  // Store city ID in data attribute\n    datalist.appendChild(option);\n  }\n}\n\n// Function to load the city-mapping JSON from a path\nasync function loadCityMapping(path) {\n  try {\n    const response = await fetch(path);\n    \n    if (!response.ok) {\n      throw new Error(`Failed to fetch city-mapping.json from ${path}: ${response.statusText}`);\n    }\n\n    const cityMapping = await response.json();  // Parse JSON from the response\n    populateCityOptions(cityMapping);  // Populate the city datalist\n  } catch (error) {\n    console.error('Error loading city mapping:', error);\n  }\n}\n\n// Event listener for city selection\ndocument.getElementById('city').addEventListener('input', function () {\n  const cityName = this.value;\n  const datalistOptions = document.querySelectorAll('#city-list option');\n  \n  // Find the matching option and set the city ID\n  for (let option of datalistOptions) {\n    if (option.value === cityName) {\n      document.getElementById('city-id').value = option.dataset.cityId;\n      break;\n    }\n  }\n});\n\n// Event listener for city selection\ndocument.getElementById('city').addEventListener('input', function () {\n  const cityName = this.value;\n  const datalistOptions = document.querySelectorAll('#city-list option');\n  \n  // Find the matching option and set the city ID\n  for (let option of datalistOptions) {\n    if (option.value === cityName) {\n      document.getElementById('city-id').value = option.dataset.cityId;\n      break;\n    }\n  }\n});\n\n\nasync function loadCityData() {\n  // Show the loading indicator\n  document.getElementById('loading-indicator').style.display = 'block';\n\n  try {\n    // Simulate the time it takes to load data (e.g., fetching city data)\n    await loadGlobeData(); // Whatever logic is needed to load the globe or data\n\n    // Hide the loading indicator once the data is fully loaded\n    document.getElementById('loading-indicator').style.display = 'none';\n\n    console.log('City data loaded, globe rendered');\n  } catch (error) {\n    console.error('Error loading data:', error);\n    // Optionally, handle the error and inform the user\n    document.getElementById('loading-indicator').textContent = 'Failed to load data. Please try again.';\n  }\n}\n\n// Simulate a function that loads the globe or city data\nasync function loadGlobeData() {\n  // Simulating a delay for data loading\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      // Logic to load the globe or data can go here\n      fetchCitiesAndCreateGlobe();\n      resolve();\n    }, 1000); // Simulate a 3-second delay\n  });\n}\n\nasync function participantExists(secondName, bibNumber) {\n  // Normalize inputs for comparison\n  const normalizedSecondName = normalizeName(secondName);\n\n  // Reference to Firestore collection\n  const participantsRef = firebase.firestore().collection('participants');\n\n  // Query Firestore to find participant by surname and bib number\n  const querySnapshot = await participantsRef\n    .where('secondName', '==', normalizedSecondName)\n    .where('bibNo', '==', bibNumber)\n    .get();\n\n  return !querySnapshot.empty; // Returns true if participant exists\n}\n\n// Function to normalize names (capitalize first letter of each name)\nfunction normalizeName(name) {\n  return name.charAt(0).toUpperCase() + name.slice(1).toLowerCase();\n}\n\n// Form submission logic for the overlay\ndocument.getElementById('participant-check-form').addEventListener('submit', async (event) => {\n  event.preventDefault();\n  \n  const secondName = document.getElementById('surname').value.trim();\n  const bibNumber = document.getElementById('bib-number').value.trim();\n\n  // Check if participant exists in Firestore\n  const exists = await participantExists(secondName, bibNumber);\n  \n  if (exists) {\n    document.getElementById('overlay-form').style.display = 'none'; // Hide overlay form\n  } else {\n    const errorMessageDiv = document.getElementById('error-message');\n    errorMessageDiv.textContent = 'Participant not found. Please check your details.';\n    errorMessageDiv.style.display = 'block'; // Show error message\n  }\n});\n\n// Call the loadCityData function on window load or when necessary\nwindow.onload = loadCityData;\n\nloadCityMapping('city-mapping.json');\n"],"names":["firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firebase","initializeApp","db","firestore","storage","joinPopup","document","getElementById","removePopup","addEventListener","style","display","closePopup","isUserInParticipants","_x","_x2","_isUserInParticipants","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee5","firstName","secondName","formattedFirstName","formattedSecondName","participantsRef","q","querySnapshot","wrap","_callee5$","_context5","prev","next","toTitleCase","collection","query","where","getDocs","sent","empty","console","log","abrupt","t0","error","stop","name","toLowerCase","split","map","word","charAt","toUpperCase","slice","join","checkIfUserExists","_x3","_x4","_x5","_checkIfUserExists","_callee6","cityId","usersSnapshot","_callee6$","_context6","get","checkIfInstagramExists","_x6","_checkIfInstagramExists","_callee7","instagram","_callee7$","_context7","joinFormSubmitting","_ref","_callee","event","cityInput","cityList","selectedCity","cityError","isValidCity","i","joinButton","pictureInput","userExists","instagramExists","pictureURL","pictureFile","storageRef","pictureRef","uploadSnapshot","_callee$","_context","preventDefault","options","value","trim","length","disabled","alert","files","ref","child","concat","Date","now","put","getDownloadURL","add","incrementCityUsers","loadCityData","finish","_x7","Event","bubbles","dispatchEvent","validateCity","_x8","_incrementCityUsers","_callee9","cityRef","_callee9$","_context9","doc","runTransaction","_ref5","_callee8","transaction","cityDoc","currentNumberOfUsers","_callee8$","_context8","exists","data","numberOfUsers","update","_x16","_ref2","_callee2","userIds","_callee2$","_context2","forEach","push","id","timestamp","_x9","fetchCities","_fetchCities","_callee10","citiesCollection","citiesSnapshot","cities","_callee10$","_context10","orderBy","limit","cityData","latitude","longitude","population","country","fetchUsersForCity","_x10","_fetchUsersForCity","_callee11","users","_callee11$","_context11","userDoc","userData","fetchCitiesAndCreateGlobe","then","globe","Globe","globeImageUrl","labelsData","labelLat","d","labelLng","labelText","labelSize","minSize","maxSize","minUsers","maxUsers","labelDotRadius","minRadius","maxRadius","labelColor","labelResolution","backgroundColor","pointOfView","lat","lng","altitude","onLabelClick","_ref3","_callee3","city","cityInfo","usersInfo","_callee3$","_context3","find","c","user","textContent","innerHTML","_x11","populateCityOptions","cityMapping","datalist","_i","_Object$entries","Object","entries","_Object$entries$_i","_slicedToArray","cityName","option","createElement","dataset","appendChild","loadCityMapping","_x12","_loadCityMapping","_callee12","path","response","_callee12$","_context12","fetch","ok","Error","statusText","json","datalistOptions","querySelectorAll","_iterator","_createForOfIteratorHelper","_step","s","n","done","err","e","f","_iterator2","_step2","_loadCityData","_callee13","_callee13$","_context13","loadGlobeData","_loadGlobeData","_callee14","_callee14$","_context14","Promise","resolve","setTimeout","participantExists","_x13","_x14","_participantExists","_callee15","bibNumber","normalizedSecondName","_callee15$","_context15","normalizeName","_ref4","_callee4","errorMessageDiv","_callee4$","_context4","_x15","window","onload"],"mappings":"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"}