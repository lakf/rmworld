{"version":3,"file":"globe.gl.js","sources":["../src/scripts.js"],"sourcesContent":["const firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\n  measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID\n};\n\n// Initialize Firebase app\nfirebase.initializeApp(firebaseConfig);\n\nconst db = firebase.firestore();\nconst storage = firebase.storage();\n\n// Popup card logic\nconst joinPopup = document.getElementById('join-popup');\nconst removePopup = document.getElementById('remove-popup');\n\n// Show popup when \"Join\" button is clicked\ndocument.getElementById('join-btn').addEventListener('click', () => {\n  joinPopup.style.display = 'block';\n});\n\n// Show popup when \"Remove\" button is clicked\ndocument.getElementById('remove-btn').addEventListener('click', () => {\n  removePopup.style.display = 'block';\n});\n\n// Close the popups\nfunction closePopup() {\n  joinPopup.style.display = 'none';\n  removePopup.style.display = 'none';\n}\n\ndocument.getElementById('close-join-form').addEventListener('click', closePopup);\ndocument.getElementById('close-remove-form').addEventListener('click', closePopup);\n\n// Function to check if a user exists in the participants list\nasync function isUserInParticipants(firstName, secondName) {\n  // Normalize inputs to \"FirstName LastName\" format\n  const formattedFirstName = firstName.toLowerCase();\n  const formattedSecondName = secondName.toLowerCase();\n\n  // Query Firestore for the formatted names\n  const participantsRef = firebase.firestore().collection('participants');\n  \n  const q = query(\n    participantsRef, \n    where('firstName', '==', formattedFirstName),\n    where('secondName', '==', formattedSecondName)\n  );\n\n  try {\n    const querySnapshot = await getDocs(q);\n    \n    if (!querySnapshot.empty) {\n      console.log(querySnapshot);\n      console.log('User found in participants.');\n      return true;\n    } else {\n      console.log('User not found in participants.');\n      return false;\n    }\n  } catch (error) {\n    console.error('Error checking Firestore:', error);\n    return false;\n  }\n}\n\nfunction toTitleCase(name) {\n  return name\n    .toLowerCase() // First convert everything to lowercase\n    .split(' ') // Split by space to handle names with multiple parts\n    .map(word => word.charAt(0).toUpperCase() + word.slice(1)) // Capitalize first letter of each word\n    .join(' '); // Join them back together with spaces\n}\n\n// Function to check if a user with the same first name, second name, and city already exists\nasync function checkIfUserExists(firstName, secondName, locationId) {\n  console.log('Checking if user in same location with same name already exists');\n  try {\n    // Query the Firestore 'users' collection for the given firstName, secondName, and cityId\n    const usersSnapshot = await db.collection('users')\n      .where('firstName', '==', firstName)\n      .where('secondName', '==', secondName)\n      .where('locationId', '==', locationId)\n      .get();\n\n    // If the query returns any documents, a user already exists\n    if (!usersSnapshot.empty) {\n      console.log(\"existing users: \", usersSnapshot)\n      return true;  // User exists\n    } else {\n      return false; // No user found\n    }\n  } catch (error) {\n    console.error('Error checking for existing user: ', error);\n    return false;  // Return false in case of error\n  }\n}\n\ndocument.getElementById('country').addEventListener('input', toggleStateInput);\nfunction toggleStateInput() {\n  const countryInput = document.getElementById('country').value;\n  const stateContainer = document.getElementById('state-container');\n  if (countryInput === 'United States') {\n      stateContainer.style.display = 'block';\n  } else {\n      stateContainer.style.display = 'none';\n  }\n}\n\n// Function to check if a user with the same Instagram handle already exists\nasync function checkIfInstagramExists(instagram) {\n  console.log('Checking if instagram handle already exists');\n  try {\n    // Query the Firestore 'users' collection for the given Instagram handle\n    const usersSnapshot = await db.collection('users')\n      .where('instagram', '==', instagram.toLowerCase())\n      .get();\n\n    // If the query returns any documents, a user already exists with this Instagram\n    if (!usersSnapshot.empty) {\n      return true;  // Instagram exists\n    } else {\n      return false; // No user found with this Instagram\n    }\n  } catch (error) {\n    console.error('Error checking for existing Instagram: ', error);\n    return false;  // Return false in case of error\n  }\n}\n\nlet joinFormSubmitting = false;\n\ndocument.getElementById('join-form').addEventListener('submit', async (event) => {\n    event.preventDefault(); // Prevent the default form submission\n\n    if (joinFormSubmitting) {\n        return; // If already submitting, prevent duplicate submissions\n    }\n\n    joinFormSubmitting = true; // Set the flag to true, to indicate the form is being submitted\n\n    console.log('Inside the join form.');\n\n    // City validation logic\n    const countryInput = document.getElementById('country');\n    const countryList = document.getElementById('country-list').options;\n    const selectedCountry = countryInput.value.trim();\n    const countryError = document.getElementById('country-error');\n    \n    let isValidCountry = false;\n\n    // Loop through the options in the datalist to check for a match\n    for (let i = 0; i < countryList.length; i++) {\n      if (selectedCountry === countryList[i].value) {\n        isValidCountry = true;\n        break;\n      }\n    }\n\n    if (!isValidCountry) {\n      countryError.style.display = 'block'; // Show the error message\n      countryInput.value = ''; // Optionally clear the input\n      joinFormSubmitting = false; // Reset the flag\n      return; // Stop form submission if city is invalid\n    } else {\n      countryError.style.display = 'none'; // Hide the error message if valid\n    }\n\n    // Continue with the rest of the form submission logic if the city is valid\n    const joinButton = document.getElementById('join-btn');\n    joinButton.disabled = true; // Disable the button\n    document.getElementById('loading-indicator').style.display = 'block'; // Show loading indicator\n\n    const firstName = document.getElementById('first-name').value.trim();\n    const secondName = document.getElementById('second-name').value.trim();\n    const countryId = document.getElementById('country-id').value;\n    const stateId = document.getElementById('state-id').value;\n    const instagram = document.getElementById('instagram').value.trim();\n    const pictureInput = document.getElementById('picture');\n    const cityInput = document.getElementById('city').value.trim();\n\n    // Check if the user exists in participants\n    if (!isUserInParticipants(firstName, secondName)) {\n      alert('User not found in marathon participants. Please check your name and try again.');\n      joinButton.disabled = false; // Re-enable the button\n      joinFormSubmitting = false; // Reset the flag\n      document.getElementById('loading-indicator').style.display = 'none'; // Hide loading\n      return; // Stop form submission\n    }\n\n    const locationId = stateId || countryId;\n    const userExists = await checkIfUserExists(firstName, secondName, locationId);\n    if (userExists) {\n      alert('A user with the same name in the selected city already exists. Please try again.');\n      joinButton.disabled = false; // Re-enable the button\n      joinFormSubmitting = false; // Reset the flag\n      document.getElementById('loading-indicator').style.display = 'none'; // Hide loading\n      return; // Stop form submission\n    }\n\n    const instagramExists = await checkIfInstagramExists(instagram);\n    if (instagramExists) {\n      alert('This Instagram handle is already associated with another user. Please use a different one.');\n      joinButton.disabled = false; // Re-enable the button\n      joinFormSubmitting = false; // Reset the flag\n      document.getElementById('loading-indicator').style.display = 'none'; // Hide loading\n      return; // Stop form submission\n    }\n\n    try {\n      let pictureURL = null;\n\n      // Check if a picture file was selected\n      if (pictureInput.files && pictureInput.files[0]) {\n        const pictureFile = pictureInput.files[0];\n        const storageRef = firebase.storage().ref();\n        const pictureRef = storageRef.child(`profile_pictures/${firstName}_${secondName}_${Date.now()}`);\n\n        // Upload the selected picture file\n        const uploadSnapshot = await pictureRef.put(pictureFile);\n        pictureURL = await uploadSnapshot.ref.getDownloadURL();\n      }\n\n      // Continue with adding user to Firestore as before\n      const newUserRef = await db.collection('users').add({\n        firstName,\n        secondName,\n        locationId: stateId || countryId,\n        instagram: instagram.toLowerCase(),\n        pictureURL: pictureURL || null,\n        cityName: cityInput\n      });\n\n      console.log('Calling incrementLocationUsers for locationId:', locationId);\n      await incrementLocationUsers(locationId);\n\n      alert('Thank you for joining!');\n      loadCityData();\n      closePopup();\n    } catch (error) {\n      console.error('Error adding user or uploading image:', error);\n      alert('Failed to join. Please try again.');\n    } finally {\n      // Re-enable the button and hide loading in all scenarios\n      joinButton.disabled = false;\n      joinFormSubmitting = false; // Reset the flag\n      document.getElementById('loading-indicator').style.display = 'none'; // Hide loading\n    }\n});\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const countryInput = document.getElementById('country');\n  const countryError = document.getElementById('country-error');\n  const countryList = document.getElementById('country-list');\n\n  // 1. Show the dropdown immediately when the user clicks into the city input (on focus)\n  countryInput.addEventListener('focus', () => {\n    countryError.style.display = 'none'; // Hide any previous error message\n    // Trigger an input event to open the dropdown list immediately\n    const event = new Event('input', { bubbles: true });\n    countryInput.dispatchEvent(event);\n  });\n\n  // Validation logic to check if the input matches a city from the datalist\n  countryInput.addEventListener('blur', () => {\n    validateCountry(); // Call validation when the user clicks out\n  });\n\n  function validateCountry() {\n    const selectedCountry = countryInput.value.trim();\n    let isValidCountry = false;\n\n    // Check if the entered city matches one of the datalist options\n    for (let i = 0; i < countryList.options.length; i++) {\n      if (selectedCountry === countryList.options[i].value) {\n        isValidCountry = true;\n        break;\n      }\n    }\n\n    if (!isValidCountry) {\n      countryError.style.display = 'block'; // Show the error message if invalid\n      countryInput.value = ''; // Optionally clear the input\n    } else {\n      countryError.style.display = 'none'; // Hide the error message if valid\n    }\n  }\n});\n\nasync function incrementLocationUsers(locationId) {\n  console.log('In increment location users');\n  try {\n    const locationRef = db.collection('location').doc(locationId);\n\n    await db.runTransaction(async (transaction) => {\n      const locationDoc = await transaction.get(locationRef);\n\n      if (!locationDoc.exists) {\n        console.error(`Location document with ID ${locationId} does not exist!`);\n        return;\n      } else {\n        console.log(`Location document with ID ${locationId} exists. Proceeding to update.`);\n      }\n\n      const currentNumberOfUsers = locationDoc.data().numberOfUsers || 0;\n\n      transaction.update(locationRef, {\n        numberOfUsers: currentNumberOfUsers + 1\n      });\n    });\n    console.log('Location user count incremented successfully.');\n  } catch (error) {\n    console.error('Error incrementing location users:', error);\n  }\n}\n\n// Handle \"Remove\" form submission (communicate with Firebase)\ndocument.getElementById('remove-form').addEventListener('submit', async (event) => {\n  event.preventDefault();\n\n  const firstName = document.getElementById('first-name-remove').value;\n  const secondName = document.getElementById('second-name-remove').value;\n\n  try {\n    // Step 1: Check if user exists with the provided first name and second name\n    const usersSnapshot = await db.collection('users')\n      .where('firstName', '==', firstName)\n      .where('secondName', '==', secondName)\n      .get();\n\n    // Step 2: Handle if no user is found\n    if (usersSnapshot.empty) {\n      alert('No user found with the given name. Please check the details.');\n      return; // Stop submission\n    }\n\n    // Step 3: Collect all matching user IDs (handle multiple matches)\n    const userIds = [];\n    usersSnapshot.forEach(doc => {\n      userIds.push(doc.id); // Collect the user ID\n    });\n\n    // Step 4: Submit the removal request to the 'removal_requests' collection with the matched user IDs\n    await db.collection('removal_requests').add({\n      firstName: firstName,\n      secondName: secondName,\n      userIds: userIds,  // Store the matching user IDs\n      timestamp: new Date() // Save the timestamp of the request\n    });\n\n    alert(\"Your removal request has been submitted. Removal will occur within 24hrs.\");\n  } catch (error) {\n    console.error(\"Error submitting removal request: \", error);\n    alert(\"Failed to submit removal request. Please try again.\");\n  }\n\n  closePopup(); // Close the form popup after successful submission\n});\n\n// Fetch city data from Firestore\nasync function fetchLocations() {\n  const locationCollection = db.collection(\"location\")\n      .where('numberOfUsers', '>', 0)  // Filter for cities where numberOfUsers is greater than 0\n      .orderBy('numberOfUsers', 'desc') // Order by numberOfUsers in descending order\n      .limit(100); \n  const locationSnapshot = await locationCollection.get();\n  const locations = [];\n\n  locationSnapshot.forEach((locationDoc) => {\n    const cityData = locationDoc.data();\n    locations.push({\n      id: locationDoc.id,\n      name: cityData.stateName || cityData.countryName,\n      latitude: cityData.latitude,\n      longitude: cityData.longitude,\n      numberOfUsers: cityData.numberOfUsers,\n      country: cityData.country\n    });\n  });\n\n  // console.log(\"LOCATIONS: \", locations);  // Check that city data is being fetched correctly\n  return locations;\n}\n\n// Fetch user data for a specific city from Firestore\nasync function fetchUsersForLocation(locationId) {\n  const usersSnapshot = await db.collection(\"users\").where('locationId', '==', locationId).get();\n  const users = [];\n\n  usersSnapshot.forEach((userDoc) => {\n    const userData = userDoc.data();\n    users.push({\n      firstName: userData.firstName,\n      secondName: userData.secondName,\n      instagram: userData.instagram,\n      pictureURL: userData.pictureURL,\n      city: userData.cityName\n    });\n  });\n\n  console.log(`USERS FOR LOCATION (${locationId}): `, users);  // Log the users for debugging\n  return users;\n}\n\nfunction fetchCitiesAndCreateGlobe() {\n  // Globe.js initialization with Firebase data\n  fetchLocations().then(locations => {\n    console.log(locations); // Log the cities to check if data is being pulled correctly\n    \n    const globe = Globe()\n    .globeImageUrl('//unpkg.com/three-globe/example/img/earth-blue-marble.jpg')\n    .labelsData(locations)\n    .labelLat(d => d.latitude)\n    .labelLng(d => d.longitude)\n    .labelText(d => d.name)\n    .labelSize(d => {\n        const minSize = 0.6; // Minimum label size\n        const maxSize = 1.6; // Maximum label size\n        const minUsers = 1;   // Minimum number of users\n        const maxUsers = 30;  // Maximum number of users\n\n        // Calculate the size based on the number of users\n        return ((d.numberOfUsers - minUsers) / (maxUsers - minUsers)) * (maxSize - minSize) + minSize;\n    })\n    .labelDotRadius(d => {\n        const minRadius = 0.6; // Minimum label size\n        const maxRadius = 1.2;\n\n        // Calculate the radius based on the number of users\n        return ((d.numberOfUsers - 1) / (30 - 1)) * (maxRadius - minRadius) + minRadius; \n    })\n    .labelColor(() => '#ffffff')\n    .labelResolution(2)\n    .backgroundColor('#FDF5E8')\n    (document.getElementById('globeViz'));\n\n  // Set initial view to the USA\n  globe.pointOfView({ lat: 37.0902, lng: -95.7129, altitude: 2.5 }, 1000);\n\n  // Handle label clicks to show city info and associated users\n  globe.onLabelClick(async location => {\n    console.log(\"label clicked, location: \", location)\n    const selectedLocation = locations.find(c => c.name === location.name);\n    console.log(\"selectedLocation: \", selectedLocation)\n    if (selectedLocation) {\n      const locationInfo = selectedLocation.name;\n      \n      // Fetch users for the selected city\n      // console.log(\"selectedLocation.id: \", selectedLocation.id);\n      const users = await fetchUsersForLocation(selectedLocation.id);\n      // console.log(\"users found in location: \", users)\n\n      // Map users data to display\n      const usersInfo = users.map(user => `\n        <a href=\"https://instagram.com/${user.instagram}\" target=\"_blank\" class=\"user-card-link\">\n          <div class=\"user-card\">\n            <img src=\"${user.pictureURL}\" alt=\"${user.firstName}'s picture\" class=\"user-picture\">\n            <div class=\"user-info\">\n              <p class=\"user-name\">${user.firstName} ${user.secondName}</p>\n              <p class=\"user-instagram\">${user.city}</p>\n              <p class=\"user-instagram\">@${user.instagram}</p>\n            </div>\n          </div>\n        </a>\n      `).join(\"\");  // Join without extra spaces to avoid layout issues\n        // Join without extra spaces to avoid layout issues\n\n      // console.log(\"usersInfo: \", usersInfo);\n\n      // Update the popup with city and user info\n      document.getElementById('location-name').textContent = locationInfo;\n      document.getElementById('location-info').innerHTML = usersInfo; // Use innerHTML to render HTML content\n\n      // Show the city info popup\n      document.getElementById('location-popup').style.display = 'block';\n    }\n});\n});\n};\n\n// Close city info popup\ndocument.getElementById('location-close-btn').addEventListener('click', function() {\n  document.getElementById('location-popup').style.display = 'none';\n});\n\n// Function to populate the city options in the datalist\nfunction populateCityOptions(countryMapping, stateMapping) {\n  const countryDatalist = document.getElementById('country-list');\n  const stateDatalist = document.getElementById('state-list');\n  \n  // Clear existing options\n  countryDatalist.innerHTML = '';\n  stateDatalist.innerHTML = '';\n\n  // Add options to the datalist\n  for (const [cityName, cityId] of Object.entries(countryMapping)) {\n    const option = document.createElement('option');\n    option.value = cityName;  // Display the city name to the user\n    option.dataset.cityId = cityId;  // Store city ID in data attribute\n    countryDatalist.appendChild(option);\n  }\n\n  for (const [cityName, cityId] of Object.entries(stateMapping)) {\n    const option = document.createElement('option');\n    option.value = cityName;  // Display the city name to the user\n    option.dataset.cityId = cityId;  // Store city ID in data attribute\n    stateDatalist.appendChild(option);\n  }\n}\n\nasync function loadCityMapping(countryPath, statePath) {\n  try {\n    const countryResponse = await fetch(countryPath);\n    const stateResponse = await fetch(statePath);\n    \n    if (!countryResponse.ok) {\n      throw new Error(`Failed to fetch country-mapping.json from ${countryPath}: ${countryResponse.statusText}`);\n    }\n\n    if (!stateResponse.ok) {\n      throw new Error(`Failed to fetch state-mapping.json from ${statePath}: ${stateResponse.statusText}`);\n    }\n\n    const countryMapping = await countryResponse.json();  // Parse JSON from the response\n    const stateMapping = await stateResponse.json();\n    populateCityOptions(countryMapping, stateMapping);  // Populate the city datalist\n  } catch (error) {\n    console.error('Error loading mapping:', error);\n  }\n}\n\n// Event listener for country selection\ndocument.getElementById('country').addEventListener('input', function () {\n  const countryName = this.value;\n  const datalistOptions = document.querySelectorAll('#country-list option');\n  \n  // Find the matching option and set the city ID\n  for (let option of datalistOptions) {\n    if (option.value === countryName) {\n      document.getElementById('country-id').value = option.dataset.cityId;\n      break;\n    }\n  }\n});\n\n// Event listener for city selection\ndocument.getElementById('state').addEventListener('input', function () {\n  const stateName = this.value;\n  const datalistOptions = document.querySelectorAll('#state-list option');\n  \n  // Find the matching option and set the city ID\n  for (let option of datalistOptions) {\n    if (option.value === stateName) {\n      document.getElementById('state-id').value = option.dataset.cityId;\n      break;\n    }\n  }\n});\n\n\nasync function loadCityData() {\n  // Show the loading indicator\n  document.getElementById('loading-indicator').style.display = 'block';\n\n  try {\n    // Simulate the time it takes to load data (e.g., fetching city data)\n    await loadGlobeData(); // Whatever logic is needed to load the globe or data\n\n    // Hide the loading indicator once the data is fully loaded\n    document.getElementById('loading-indicator').style.display = 'none';\n\n    console.log('City data loaded, globe rendered');\n  } catch (error) {\n    console.error('Error loading data:', error);\n    // Optionally, handle the error and inform the user\n    document.getElementById('loading-indicator').textContent = 'Failed to load data. Please try again.';\n  }\n}\n\n// Simulate a function that loads the globe or city data\nasync function loadGlobeData() {\n  // Simulating a delay for data loading\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      // Logic to load the globe or data can go here\n      fetchCitiesAndCreateGlobe();\n      resolve();\n    }, 1000); // Simulate a 3-second delay\n  });\n}\n\nasync function participantExists(secondName, bibNumber) {\n  // Normalize inputs for comparison\n  const normalizedSecondName = secondName.toLowerCase();\n\n  // Reference to Firestore collection\n  const participantsRef = firebase.firestore().collection('participants');\n\n  // Query Firestore to find participant by surname and bib number\n  const querySnapshot = await participantsRef\n    .where('secondName', '==', normalizedSecondName)\n    .where('bibNo', '==', bibNumber)\n    .get();\n\n  return !querySnapshot.empty; // Returns true if participant exists\n}\n\n// Function to normalize names (capitalize first letter of each name)\nfunction normalizeName(name) {\n  return name.charAt(0).toUpperCase() + name.slice(1).toLowerCase();\n}\n\n// Form submission logic for the overlay\ndocument.getElementById('participant-check-form').addEventListener('submit', async (event) => {\n  event.preventDefault();\n  \n  const secondName = document.getElementById('surname').value.trim();\n  const bibNumber = document.getElementById('bib-number').value.trim();\n\n  // Check if participant exists in Firestore\n  const exists = await participantExists(secondName, bibNumber);\n  \n  if (exists) {\n    document.getElementById('overlay-form').style.display = 'none'; // Hide overlay form\n  } else {\n    const errorMessageDiv = document.getElementById('error-message');\n    errorMessageDiv.textContent = 'Participant not found. Please check your details.';\n    errorMessageDiv.style.display = 'block'; // Show error message\n  }\n});\n\n// Call the loadCityData function on window load or when necessary\nwindow.onload = loadCityData;\n\nloadCityMapping('country-list.json', 'state-list.json');\n"],"names":["firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firebase","initializeApp","db","firestore","storage","joinPopup","document","getElementById","removePopup","addEventListener","style","display","closePopup","isUserInParticipants","_x","_x2","_isUserInParticipants","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee5","firstName","secondName","formattedFirstName","formattedSecondName","participantsRef","q","querySnapshot","wrap","_callee5$","_context5","prev","next","toLowerCase","collection","query","where","getDocs","sent","empty","console","log","abrupt","t0","error","stop","checkIfUserExists","_x3","_x4","_x5","_checkIfUserExists","_callee6","locationId","usersSnapshot","_callee6$","_context6","get","toggleStateInput","countryInput","value","stateContainer","checkIfInstagramExists","_x6","_checkIfInstagramExists","_callee7","instagram","_callee7$","_context7","joinFormSubmitting","_ref","_callee","event","countryList","selectedCountry","countryError","isValidCountry","i","joinButton","countryId","stateId","pictureInput","cityInput","userExists","instagramExists","pictureURL","pictureFile","storageRef","pictureRef","uploadSnapshot","_callee$","_context","preventDefault","options","trim","length","disabled","alert","files","ref","child","concat","Date","now","put","getDownloadURL","add","cityName","incrementLocationUsers","loadCityData","finish","_x7","Event","bubbles","dispatchEvent","validateCountry","_x8","_incrementLocationUsers","_callee9","locationRef","_callee9$","_context9","doc","runTransaction","_ref5","_callee8","transaction","locationDoc","currentNumberOfUsers","_callee8$","_context8","exists","data","numberOfUsers","update","_x17","_ref2","_callee2","userIds","_callee2$","_context2","forEach","push","id","timestamp","_x9","fetchLocations","_fetchLocations","_callee10","locationCollection","locationSnapshot","locations","_callee10$","_context10","orderBy","limit","cityData","name","stateName","countryName","latitude","longitude","country","fetchUsersForLocation","_x10","_fetchUsersForLocation","_callee11","users","_callee11$","_context11","userDoc","userData","city","fetchCitiesAndCreateGlobe","then","globe","Globe","globeImageUrl","labelsData","labelLat","d","labelLng","labelText","labelSize","minSize","maxSize","minUsers","maxUsers","labelDotRadius","minRadius","maxRadius","labelColor","labelResolution","backgroundColor","pointOfView","lat","lng","altitude","onLabelClick","_ref3","_callee3","location","selectedLocation","locationInfo","usersInfo","_callee3$","_context3","find","c","map","user","join","textContent","innerHTML","_x11","populateCityOptions","countryMapping","stateMapping","countryDatalist","stateDatalist","_i","_Object$entries","Object","entries","_Object$entries$_i","_slicedToArray","cityId","option","createElement","dataset","appendChild","_i2","_Object$entries2","_Object$entries2$_i","loadCityMapping","_x12","_x13","_loadCityMapping","_callee12","countryPath","statePath","countryResponse","stateResponse","_callee12$","_context12","fetch","ok","Error","statusText","json","datalistOptions","querySelectorAll","_iterator","_createForOfIteratorHelper","_step","s","n","done","err","e","f","_iterator2","_step2","_loadCityData","_callee13","_callee13$","_context13","loadGlobeData","_loadGlobeData","_callee14","_callee14$","_context14","Promise","resolve","setTimeout","participantExists","_x14","_x15","_participantExists","_callee15","bibNumber","normalizedSecondName","_callee15$","_context15","_ref4","_callee4","errorMessageDiv","_callee4$","_context4","_x16","window","onload"],"mappings":"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"}